name: Single‐File Test & Report

on:
  workflow_dispatch:

jobs:
  single_test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest on tests/test_example.py
        run: |
          pytest tests/test_example.py \
            --json-report \
            --json-report-file=report-single.json \
            -q

      - name: "Debug: show `report-single.json` exists"
        run: |
          ls -l report-single.json

      - name: Create upload URL for Artifact
        id: create_artifact
        run: |
          # 1) Create a new artifact (no "path" field in the JSON)
          RESPONSE=$(
            curl -sSL \
              -X POST "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{ "name": "single-test-report", "expire_in_days": 7 }'
          )
          echo "RAW RESPONSE: $RESPONSE" 1>&2

          # 2) Extract the upload_url template (e.g. ".../artifacts/1234567{?name,label}")
          UPLOAD_URL_RAW=$(echo "$RESPONSE" | jq -r .upload_url)
          echo "Found upload_url template: $UPLOAD_URL_RAW" 1>&2

          # 3) Replace the `{?name,label}` with `?name=report-single.json`
          UPLOAD_URL="${UPLOAD_URL_RAW//\{\?name,label\}/\?name=report-single.json}"
          echo "Final upload_url: $UPLOAD_URL" 1>&2

          # 4) Export it for the next step
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT

      - name: Upload `report-single.json` into the Artifact
        run: |
          # Now that we have a valid URL (e.g. ".../artifacts/1234567?name=report-single.json"),
          # do a PUT with the file as a binary ZIP payload.
          curl -sSL \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/zip" \
            --data-binary @report-single.json \
            "${{ steps.create_artifact.outputs.upload_url }}"

      - name: Confirm Artifact is uploaded
        run: |
          echo "✅ report-single.json has been pushed up as a GitHub Actions artifact named 'single-test-report'"
